"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 5.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-0gzzd&b5#)f2**v7dn@^-w&1=6%l1y=iynu3iks+rj)yp!85wu"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "store",  # dev_1
    "django.contrib.humanize",  # dev_5
    "accounts",  # dev_9
    "cart",  # dev_15
    "orders",  # dev_24
    "payment",  # dev_26
    "rest_framework",  # dev_28
    "api",  # dev_28
    "corsheaders",  # dev_3_Fruit
    "djoser",  # dev_5_Fruit
    # dev_10_Fruit
    # allauth
    "django.contrib.sites",
    "allauth",
    "allauth.account",
    "allauth.socialaccount",
    "allauth.socialaccount.providers.kakao",
    # rest framework + dj-rest-auth
    #'rest_framework', 위에 있으므로
    "rest_framework.authtoken",
    "dj_rest_auth",
    "dj_rest_auth.registration",
    # JWT (선택적으로 cookies 지원)
    # "rest_framework_simplejwt.token_blacklist",
    #"social_django",  # 추가
    # "djangorestframework_simplejwt",  # 추가
    # simple-jwt 추가해주기
    #"rest_framework_simplejwt",
]

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",  # dev_3_Fruit
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    # dev_10_Fruit 추가된 미들웨어
    "allauth.account.middleware.AccountMiddleware",  # 이 줄을 추가해야 합니다.
    "social_django.middleware.SocialAuthExceptionMiddleware",  # 소셜 미들웨어
]

# dev_3_Fruit
# 정확히 허용할 도메인만
CORS_ALLOWED_ORIGINS = [
    "http://localhost:5173",  # 프론트 도메인
]
CORS_ORIGIN_ALLOW_ALL = True  # 어떠한 출처든 상관없이 정보를 공유

ROOT_URLCONF = "config.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],  # dev_1
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "cart.context_processors.cart",  # dev_17 cart(request)가 모든 템플릿에서 사용 가능해짐.
            ],
        },
    },
]

WSGI_APPLICATION = "config.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

# dev_11
AUTH_PASSWORD_VALIDATORS = [
    # {
    #     "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    # },
    # {
    #     "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    # },
    # {
    #     "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    # },
    # {
    #     "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    # },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = "ko-kr"  # dev_1

TIME_ZONE = "Asia/Seoul"  # dev_1


USE_I18N = True

# dev_5
# Timezone의 사용여부를 정한다.
# False면 모든 datetime들을 표시하고 True면 template과 form에만 적용된다.
# 즉 DB에 저장되는 정보도 한국 시간대로 사용하려면 이 부분을 False로 지정해주어야 한다.
USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

# dev_2
# 스태틱(static) 디렉터리
# URL 상의 스택틱 폴더를 ,로컬(내컴퓨터)의 파일 폴더와 매칭 시키는 부분
# http://127.0.0.1:8000/static/a.jpg
STATIC_URL = "static/"
STATICFILES_DIRS = [
    BASE_DIR / "static",
]

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# 미디어 파일 경로 설정
import os

# dev_2
# http://127.0.0.1:8000/media/파일경로
MEDIA_URL = "media/"  # ex) /media/photo1.png
MEDIA_ROOT = os.path.join(BASE_DIR, "media")

# dev_9
# 다시 한번 migrate 시켜줘야함
AUTH_USER_MODEL = "accounts.User"

# dev_15
CART_SESSION_ID = "cart"

#dev_5_Fruit
#CORS_ALLOW_CREDENTIALS = True

# Simple JWT 패키지를 써서 JWT(JSON Web Token) 기반 인증을 사용하겠다고 설정
# 세션 쿠키 기반 인증보다 더 RESTful (stateless)
# 모바일/프론트엔드 앱과 연동이 편함 (React, Vue 등)
# 백엔드 서버에 로그인 상태 유지할 필요 없음

REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": (
        #"rest_framework_simplejwt.authentication.JWTAuthentication", #dev_10_2_Fruit
        "dj_rest_auth.jwt_auth.JWTCookieAuthentication", #dev_10_1_Fruit
    ),
}


from datetime import timedelta

#Bearer"로 설정되어 있어서 Authorization: Bearer <token> 형태로 사용함.
SIMPLE_JWT = {
    # "ACCESS_TOKEN_LIFETIME": timedelta(days=3),#timedelta(minutes=30),
    # "REFRESH_TOKEN_LIFETIME": timedelta(days=7),
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=1),
    "REFRESH_TOKEN_LIFETIME": timedelta(minutes=20),
    "AUTH_HEADER_TYPES": ("Bearer",),
}
# http://127.0.0.1:8000/api/auth/users/me/
DJOSER = {
    "USER_ID_FIELD": "id",
    "LOGIN_FIELD": "username",  # 또는 email
    "SERIALIZERS": {
        "user_create": "accounts.serializers.UserCreateSerializer",
        "user": "accounts.serializers.UserSerializer",
        "current_user": "accounts.serializers.UserSerializer",
    },
    #"CREATE_SESSION_ON_LOGIN": True,  # 로그인하면 세션도 생성됨
}

# dev_10_Fruit
SITE_ID = 1
AUTHENTICATION_BACKENDS = [
    "django.contrib.auth.backends.ModelBackend",  # 기본 인증
    "allauth.account.auth_backends.AuthenticationBackend",  # allauth
]
# dj-rest-auth + JWT 설정
# 2.2.5버전

REST_USE_JWT = True  # JWT 사용

# 3.0.0버전 이상
REST_AUTH = {
    "USE_JWT": True,
    "JWT_AUTH_HTTPONLY": True,
    'JWT_AUTH_REFRESH_COOKIE' : "refresh_token",
    'JWT_AUTH_COOKIE_USE_CSRF' : True,
    'SESSION_LOGIN' : False,
    #'USER_DETAILS_SERIALIZER': "accounts.serializers.UserRestAllAuthSerializer",
    'USER_DETAILS_SERIALIZER': "accounts.serializers.UserSerializer", #dev_10_2
    'REGISTER_SERIALIZER': "accounts.serializers.CustomRegisterSerializer", #dev_10_2
}

# dev_10_2_Fruit
#브라우저는 axios의 withCredentials: true 요청 시 쿠키를 포함해 전송
CORS_ALLOW_CREDENTIALS = True


# http://127.0.0.1:8000/api/auth/users/me/
DJOSER = {
    "USER_ID_FIELD": "id",
    "LOGIN_FIELD": "username",  # 또는 email
    "SERIALIZERS": {
        "user_create": "accounts.serializers.UserCreateSerializer",
        "user": "accounts.serializers.UserSerializer",
        "current_user": "accounts.serializers.UserSerializer",
    },
    #"CREATE_SESSION_ON_LOGIN": True,  # 로그인하면 세션도 생성됨
}

# 로그인/로그아웃 리다이렉트 (optional)
#LOGIN_REDIRECT_URL = "/"
#LOGOUT_REDIRECT_URL = "/"

from decouple import config  # or os.environ

SOCIALACCOUNT_PROVIDERS = {
    "kakao": {
        "APP": {
            "client_id": config("KAKAO_CLIENT_ID"),  # REST API 키
            "secret": config("KAKAO_SECRET"),  # Client Secret (선택)
            "key": "",  # 비워둬도 됨
        },
        "SCOPE": [
            "account_email",
            "profile",
            "gender",
        ],  # 카카오 gender 정보 제공을 위해 scope 설정 필요:
        "AUTH_PARAMS": {
            "access_type": "online",
            "prompt": "select_account",
        },
    }
}

SOCIALACCOUNT_ADAPTER = "accounts.adapters.KakaoSocialAccountAdapter"

#dev_10_2_Fruit dj_rest_auth 설정

# 카카오 소셜 로그인 때문은 아니고, 기본 로그인 방식(이메일 or 사용자명 등)에만 적용되는 설정
#'username' → 사용자명이 필요
#'email' → 이메일만으로 로그인 (아이디 없이)
#'username_email' → 둘 다 가능
# ACCOUNT_AUTHENTICATION_METHOD = "username"  # ✅ 사용자명으로 로그인
# ACCOUNT_USERNAME_REQUIRED = True  # 사용자명 필수
# ACCOUNT_EMAIL_REQUIRED = True  # 이메일도 받게 (소셜용 등)
# ACCOUNT_USER_MODEL_USERNAME_FIELD = "username"

# 로그인 방식: 이메일로 로그인
ACCOUNT_AUTHENTICATION_METHOD = "username_email"
ACCOUNT_USERNAME_REQUIRED = False  # username 필요 없음
ACCOUNT_EMAIL_REQUIRED = True  # 이메일 필수
ACCOUNT_USER_MODEL_USERNAME_FIELD = "username"  # username을 필드로 씀

# 이메일 인증 건너뛰기 (선택)
ACCOUNT_EMAIL_VERIFICATION = "none"  # 개발 중에는 'none' 추천
ACCOUNT_LOGOUT_ON_GET = True 
SOCIALACCOUNT_LOGIN_ON_GET = True #브라우저에서 단순히 링크 클릭이나 리다이렉트로 로그아웃을 시킬 수 있게 하려면 GET 요청을 허용해야 함.

# dj-rest-auth + allauth 사용 시 커스터마이징을 위한 adapter 설정
